-- üê• Jeab Hub | Delta Mobile + LDPlayer Edition | Single File
-- Theme: Yellow-Orange Pastel | Zones: Header/Sidebar/Main
-- Made By Jeab üê•

-- ========= Services / Player =========
local Players = game:GetService("Players")
local RS = game:GetService("ReplicatedStorage")
local lp = Players.LocalPlayer

-- ========= RS Bindings (soft) =========
local season = RS:FindFirstChild("season")
local weather = RS:FindFirstChild("weather")
local cycle  = RS:FindFirstChild("cycle_weatherstimeofday") -- "Day" / "Night" / "Both"

-- ========= Items / State =========
local SUNDIAL = "Sundial Totem"
local AURORA  = "Aurora Totem"
local ROD_KEY = "Rod Of The Zenith"

local runningNormal = false
local runningAurora = false
local scyllaActive  = false
local debugVisible  = false

-- throttle ‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏Ç‡∏≠‡∏á‡∏ñ‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô
local lastUseAt = 0
local function canUse(delay) return (tick() - lastUseAt) >= (delay or 1.0) end
local function markUse() lastUseAt = tick() end

-- ========= Helpers: use/equip =========
local function useItem(itemName)
    local char = lp.Character or lp.CharacterAdded:Wait()
    local humanoid = char:WaitForChild("Humanoid")
    local tool = char:FindFirstChildOfClass("Tool")

    if tool and string.find(tool.Name, itemName) then
        tool:Activate()
        return true
    end

    local backpack = lp.Backpack
    for _, t in ipairs(backpack:GetChildren()) do
        if string.find(t.Name, itemName) then
            humanoid:EquipTool(t)
            task.wait()
            t:Activate()
            return true
        end
    end
    return false
end

local function equipItem(keyword)
    local char = lp.Character or lp.CharacterAdded:Wait()
    local humanoid = char:WaitForChild("Humanoid")
    local tool = char:FindFirstChildOfClass("Tool")
    if tool and string.find(tool.Name, keyword) then
        return true
    end
    local backpack = lp.Backpack
    for _, t in ipairs(backpack:GetChildren()) do
        if string.find(t.Name, keyword) then
            humanoid:EquipTool(t)
            return true
        end
    end
    return false
end

-- expose ‡πÉ‡∏´‡πâ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
_G.UseTotem = function(kind)
    if kind == "Sundial" then return useItem(SUNDIAL)
    elseif kind == "Aurora" then return useItem(AURORA)
    end
end
_G.UseRod = function(mode)
    if mode == "Default" then return equipItem(ROD_KEY) end
end

-- ========= Debug Panel =========
local debugLines, maxLogs = {}, 80
local function makeDebugLine(parent, text, color)
    local lbl = Instance.new("TextLabel")
    lbl.Size = UDim2.new(1, -10, 0, 18)
    lbl.BackgroundTransparency = 1
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    lbl.Font = Enum.Font.SourceSans
    lbl.TextSize = 14
    lbl.Text = text
    lbl.TextColor3 = color or Color3.fromRGB(30,30,30)
    lbl.Parent = parent
    return lbl
end

local function debugLog(msg, color)
    if not debugVisible then return end
    table.insert(debugLines, msg)
    if #debugLines > maxLogs then table.remove(debugLines,1) end
    -- (UI append ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ rendering)
end

-- ========= Colors (Pastel Yellow/Orange) =========
local COLOR_HEADER  = Color3.fromRGB(255, 190, 110) -- ‡∏™‡πâ‡∏°‡∏û‡∏≤‡∏™‡πÄ‡∏ó‡∏•
local COLOR_SIDEBAR = Color3.fromRGB(245, 210, 120) -- ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏û‡∏≤‡∏™‡πÄ‡∏ó‡∏•‡πÄ‡∏Ç‡πâ‡∏°
local COLOR_MAIN    = Color3.fromRGB(255, 232, 180) -- ‡∏Ñ‡∏£‡∏µ‡∏°‡∏ó‡∏≠‡∏á‡∏û‡∏≤‡∏™‡πÄ‡∏ó‡∏•
local ACCENT_TEXT   = Color3.fromRGB(105, 70, 20)

-- ========= GUI (Screen + Chick Toggle) =========
local gui = Instance.new("ScreenGui")
gui.ResetOnSpawn = false
gui.Name = "JeabHub"
gui.Parent = lp:WaitForChild("PlayerGui")

-- ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏•‡πÇ‡∏Å‡πâ üê• (‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)
local chickBtn = Instance.new("TextButton")
chickBtn.Parent = gui
chickBtn.Size = UDim2.new(0, 54, 0, 54)
chickBtn.Position = UDim2.new(0.04, 0, 0.25, 0)
chickBtn.Text = "üê•"
chickBtn.TextSize = 36
chickBtn.BackgroundTransparency = 1 -- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
chickBtn.AutoButtonColor = true

-- ========= Main Window (3 Zones) =========
local mainFrame = Instance.new("Frame")
mainFrame.Parent = gui
mainFrame.Size = UDim2.new(0, 560, 0, 340)
mainFrame.Position = UDim2.new(0.08, 0, 0.2, 0)
mainFrame.BackgroundColor3 = COLOR_MAIN
mainFrame.BackgroundTransparency = 0.12
mainFrame.Active = true
mainFrame.Visible = true
local mainCorner = Instance.new("UICorner", mainFrame)
mainCorner.CornerRadius = UDim.new(0, 16)

-- Header Zone
local header = Instance.new("Frame")
header.Parent = mainFrame
header.Size = UDim2.new(1, 0, 0, 42)
header.BackgroundColor3 = COLOR_HEADER
header.BackgroundTransparency = 0.18
local headerCorner = Instance.new("UICorner", header)
headerCorner.CornerRadius = UDim.new(0, 16)

local title = Instance.new("TextLabel")
title.Parent = header
title.BackgroundTransparency = 1
title.Size = UDim2.new(1, -16, 1, 0)
title.Position = UDim2.new(0, 12, 0, 0)
title.Font = Enum.Font.SourceSansBold
title.TextSize = 20
title.TextXAlignment = Enum.TextXAlignment.Left
title.TextColor3 = ACCENT_TEXT
title.Text = "üê• Jeab Hub | ‡∏™‡∏Å‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏ö‡∏π‡∏ö‡∏π‡πâ"

-- Sidebar Zone
local sidebar = Instance.new("Frame")
sidebar.Parent = mainFrame
sidebar.Size = UDim2.new(0, 150, 1, -42)
sidebar.Position = UDim2.new(0, 0, 0, 42)
sidebar.BackgroundColor3 = COLOR_SIDEBAR
sidebar.BackgroundTransparency = 0.2

local sideList = Instance.new("UIListLayout", sidebar)
sideList.SortOrder = Enum.SortOrder.LayoutOrder
sideList.Padding = UDim.new(0, 6)

local sideTitle = Instance.new("TextLabel")
sideTitle.Parent = sidebar
sideTitle.Size = UDim2.new(1, 0, 0, 32)
sideTitle.BackgroundTransparency = 1
sideTitle.Font = Enum.Font.SourceSansBold
sideTitle.TextSize = 16
sideTitle.TextColor3 = ACCENT_TEXT
sideTitle.Text = "‡∏´‡∏°‡∏ß‡∏î"

local function sideButton(text)
    local b = Instance.new("TextButton")
    b.Parent = sidebar
    b.Size = UDim2.new(1, -12, 0, 30)
    b.Position = UDim2.new(0, 6, 0, 0)
    b.BackgroundColor3 = Color3.fromRGB(255,220,140)
    b.BackgroundTransparency = 0.15
    b.TextColor3 = ACCENT_TEXT
    b.Font = Enum.Font.SourceSansBold
    b.TextSize = 14
    b.Text = text
    local c = Instance.new("UICorner", b); c.CornerRadius = UDim.new(0,10)
    return b
end

local scyllaTabBtn = sideButton("‡∏™‡∏Å‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏ö‡∏π‡∏ö‡∏π‡πâ")

-- Main Panel Zone
local mainPanel = Instance.new("Frame")
mainPanel.Parent = mainFrame
mainPanel.Size = UDim2.new(1, -150, 1, -42)
mainPanel.Position = UDim2.new(0, 150, 0, 42)
mainPanel.BackgroundColor3 = COLOR_MAIN
mainPanel.BackgroundTransparency = 0.06

-- Label: Hint
local hint = Instance.new("TextLabel")
hint.Parent = mainPanel
hint.BackgroundTransparency = 1
hint.Size = UDim2.new(1, -20, 0, 26)
hint.Position = UDim2.new(0, 10, 0, 8)
hint.Font = Enum.Font.SourceSansItalic
hint.TextSize = 16
hint.TextColor3 = ACCENT_TEXT
hint.TextXAlignment = Enum.TextXAlignment.Left
hint.Text = "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Rod Of The Zenith"

-- Toggle Buttons (Scylla / Aurora)
local function makeToggle(parent, label, y)
    local btn = Instance.new("TextButton")
    btn.Parent = parent
    btn.Size = UDim2.new(0, 220, 0, 44)
    btn.Position = UDim2.new(0, 16, 0, y)
    btn.Text = label .. " : OFF"
    btn.Font = Enum.Font.SourceSansBold
    btn.TextSize = 18
    btn.TextColor3 = Color3.fromRGB(255,255,255)
    btn.BackgroundColor3 = Color3.fromRGB(30,30,30) -- OFF = ‡∏î‡∏≥
    btn.AutoButtonColor = true
    local c = Instance.new("UICorner", btn); c.CornerRadius = UDim.new(0,12)
    return btn
end

local scyllaBtn = makeToggle(mainPanel, "‚öîÔ∏è Scylla Mode", 50)
local auroraBtn = makeToggle(mainPanel, "üåå Aurora Mode", 104)

-- Debug Toggle
local debugBtn = Instance.new("TextButton")
debugBtn.Parent = mainPanel
debugBtn.Size = UDim2.new(0, 110, 0, 34)
debugBtn.Position = UDim2.new(0, 16, 0, 160)
debugBtn.Text = "Debug: OFF"
debugBtn.Font = Enum.Font.SourceSansBold
debugBtn.TextSize = 16
debugBtn.TextColor3 = Color3.fromRGB(255,255,255)
debugBtn.BackgroundColor3 = Color3.fromRGB(180,130,60)
local dbgCorner = Instance.new("UICorner", debugBtn); dbgCorner.CornerRadius = UDim.new(0,10)

-- ===== Debug Panel UI =====
local dbg = Instance.new("Frame")
dbg.Parent = gui
dbg.Size = UDim2.new(0, 360, 0, 220)
dbg.Position = UDim2.new(0.62, 0, 0.22, 0)
dbg.BackgroundColor3 = Color3.fromRGB(255,220,160)
dbg.BackgroundTransparency = 0.18
dbg.Visible = false
dbg.Active = true
local dbgCorner2 = Instance.new("UICorner", dbg); dbgCorner2.CornerRadius = UDim.new(0,12)

local dbgHeader = Instance.new("Frame")
dbgHeader.Parent = dbg
dbgHeader.Size = UDim2.new(1, 0, 0, 34)
dbgHeader.BackgroundColor3 = Color3.fromRGB(245,190,120)
dbgHeader.BackgroundTransparency = 0.2
local dbgTitle = Instance.new("TextLabel")
dbgTitle.Parent = dbgHeader
dbgTitle.BackgroundTransparency = 1
dbgTitle.Size = UDim2.new(1, -90, 1, 0)
dbgTitle.Position = UDim2.new(0, 10, 0, 0)
dbgTitle.Font = Enum.Font.SourceSansBold
dbgTitle.TextSize = 18
dbgTitle.TextXAlignment = Enum.TextXAlignment.Left
dbgTitle.TextColor3 = ACCENT_TEXT
dbgTitle.Text = "üîé Scylla Debug Log"

local copyBtn = Instance.new("TextButton")
copyBtn.Parent = dbgHeader
copyBtn.Size = UDim2.new(0, 70, 0, 26)
copyBtn.Position = UDim2.new(1, -78, 0.5, -13)
copyBtn.Text = "Copy"
copyBtn.Font = Enum.Font.SourceSansBold
copyBtn.TextSize = 14
copyBtn.TextColor3 = Color3.fromRGB(255,255,255)
copyBtn.BackgroundColor3 = Color3.fromRGB(120,170,120)
local cpc = Instance.new("UICorner", copyBtn); cpc.CornerRadius = UDim.new(0,8)

local dbgScroll = Instance.new("ScrollingFrame")
dbgScroll.Parent = dbg
dbgScroll.Size = UDim2.new(1, -10, 1, -40)
dbgScroll.Position = UDim2.new(0, 5, 0, 38)
dbgScroll.BackgroundTransparency = 1
dbgScroll.ScrollBarThickness = 6
local dbgList = Instance.new("UIListLayout", dbgScroll)
dbgList.Padding = UDim.new(0,2)
dbgList.SortOrder = Enum.SortOrder.LayoutOrder

-- render debug lines
local function renderDebug()
    if not debugVisible then return end
    -- clear & re-render
    for _,ch in ipairs(dbgScroll:GetChildren()) do
        if ch:IsA("TextLabel") then ch:Destroy() end
    end
    for _,t in ipairs(debugLines) do
        makeDebugLine(dbgScroll, t, Color3.fromRGB(60,40,20))
    end
    dbgScroll.CanvasSize = UDim2.new(0,0,0, dbgList.AbsoluteContentSize.Y + 8)
    dbgScroll.CanvasPosition = Vector2.new(0, math.max(0, dbgScroll.CanvasSize.Y.Offset - dbgScroll.AbsoluteWindowSize.Y))
end

copyBtn.MouseButton1Click:Connect(function()
    if setclipboard then
        setclipboard(table.concat(debugLines, "\n"))
        table.insert(debugLines, "‚úÖ Debug log copied!")
    else
        table.insert(debugLines, "‚ùå setclipboard ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ô Executor ‡∏ô‡∏µ‡πâ")
    end
    renderDebug()
end)

-- ========= Mobile-friendly Drag (custom) =========
local function makeDraggable(frame, dragHandle) -- dragHandle optional
    local guiObject = dragHandle or frame
    local dragging, dragStart, startPos = false, nil, nil

    local function onInputBegan(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1
        or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end

    local function onInputChanged(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement
            or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end

    guiObject.InputBegan:Connect(onInputBegan)
    guiObject.InputChanged:Connect(onInputChanged)
end

makeDraggable(mainFrame, header) -- ‡∏à‡∏±‡∏ö‡∏ó‡∏µ‡πà header ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≤‡∏Å
makeDraggable(dbg, dbgHeader)    -- ‡∏à‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏ß debug ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≤‡∏Å

-- ========= Chick Toggle =========
chickBtn.MouseButton1Click:Connect(function()
    mainFrame.Visible = not mainFrame.Visible
end)

-- ========= Utility: Set Toggle State UI =========
local function setToggle(btn, on)
    btn.Text = (btn.Text:match("^[^:]+") or "Mode") .. " : " .. (on and "ON" or "OFF")
    btn.BackgroundColor3 = on and Color3.fromRGB(70,170,70) or Color3.fromRGB(30,30,30) -- ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß/‡∏î‡∏≥
end

-- ========= Event: Sidebar -> focus ‡∏™‡∏Å‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏ö‡∏π‡∏ö‡∏π‡πâ =========
scyllaTabBtn.MouseButton1Click:Connect(function()
    -- ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏à‡∏¥‡πâ‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©
    debugLog("‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö: ‡∏™‡∏Å‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏ö‡∏π‡∏ö‡∏π‡πâ")
    renderDebug()
end)

-- ========= Workspace Scylla Detection =========
local function nameIsScylla(nm)
    return string.find(string.lower(nm or ""), "scylla") ~= nil
end

workspace.ChildAdded:Connect(function(ch)
    if nameIsScylla(ch.Name) then
        scyllaActive = true
        table.insert(debugLines, "üîî ‡∏û‡∏ö Scylla ‡πÇ‡∏ú‡∏•‡πà!")
        -- ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Scylla ‡πÇ‡∏ú‡∏•‡πà:
        if runningAurora then
            local cval = cycle and tostring(cycle.Value) or "Unknown"
            table.insert(debugLines, "‚åõ cycle = "..cval)
            if cval == "Day" then
                if canUse(1.5) then _G.UseTotem("Sundial"); markUse(); table.insert(debugLines, "‚òÄÔ∏è Day ‚Üí ‡πÉ‡∏ä‡πâ Sundial 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á") end
                task.wait(15)
                if canUse(1.5) then _G.UseTotem("Aurora"); markUse(); table.insert(debugLines, "üåå ‡πÉ‡∏ä‡πâ Aurora Totem (‡∏´‡∏•‡∏±‡∏á‡∏£‡∏≠ 15 ‡∏ß‡∏¥)") end
                _G.UseRod("Default"); table.insert(debugLines, "üé£ ‡∏ñ‡∏∑‡∏≠ Rod Of The Zenith")
            elseif cval == "Night" or cval == "Both" then
                if canUse(1.5) then _G.UseTotem("Aurora"); markUse(); table.insert(debugLines, "üåô Night/Both ‚Üí ‡πÉ‡∏ä‡πâ Aurora Totem ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ") end
                _G.UseRod("Default"); table.insert(debugLines, "üé£ ‡∏ñ‡∏∑‡∏≠ Rod Of The Zenith")
            else
                -- ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‚Üí ‡πÉ‡∏ä‡πâ Aurora ‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏ß‡∏£‡πå
                if canUse(1.5) then _G.UseTotem("Aurora"); markUse(); table.insert(debugLines, "‚ùî cycle unknown ‚Üí ‡πÉ‡∏ä‡πâ Aurora") end
                _G.UseRod("Default")
            end
            renderDebug()
        elseif runningNormal then
            _G.UseRod("Default"); table.insert(debugLines, "üé£ (‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥) ‡∏ñ‡∏∑‡∏≠ Rod")
            renderDebug()
        end
    end
end)

workspace.ChildRemoved:Connect(function(ch)
    if nameIsScylla(ch.Name) then
        scyllaActive = false
        table.insert(debugLines, "üåÄ Scylla ‡∏´‡∏≤‡∏¢ ‚Üí ‡πÉ‡∏ä‡πâ Sundial")
        if canUse(1.5) then _G.UseTotem("Sundial"); markUse() end
        renderDebug()
    end
end)

-- ========= RS change logs ‚Üí Debug =========
if season then
    season:GetPropertyChangedSignal("Value"):Connect(function()
        table.insert(debugLines, ("season changed > %s"):format(tostring(season.Value)))
        renderDebug()
    end)
end
if weather then
    weather:GetPropertyChangedSignal("Value"):Connect(function()
        table.insert(debugLines, ("weather changed > %s"):format(tostring(weather.Value)))
        renderDebug()
    end)
end
if cycle then
    cycle:GetPropertyChangedSignal("Value"):Connect(function()
        table.insert(debugLines, ("cycle_weatherstimeofday changed > %s"):format(tostring(cycle.Value)))
        renderDebug()
    end)
end

-- ========= Loops (Normal / Aurora) =========
local function normalLoop()
    task.spawn(function()
        while runningNormal do
            if not scyllaActive then
                if canUse(1.5) then _G.UseTotem("Sundial"); markUse(); end
                table.insert(debugLines, "üîÅ (Normal) ‡πÑ‡∏°‡πà‡∏°‡∏µ Scylla ‚Üí Sundial")
                renderDebug()
            else
                _G.UseRod("Default")
                table.insert(debugLines, "üé£ (Normal) ‡∏û‡∏ö Scylla ‚Üí Rod")
                renderDebug()
                repeat task.wait(0.2) until not runningNormal or not scyllaActive
            end
            task.wait(1.0)
        end
    end)
end

local function auroraLoop()
    task.spawn(function()
        while runningAurora do
            if not scyllaActive then
                if canUse(1.5) then _G.UseTotem("Sundial"); markUse(); end
                table.insert(debugLines, "üîÅ (Aurora) ‡πÑ‡∏°‡πà‡∏°‡∏µ Scylla ‚Üí Sundial")
                renderDebug()
            else
                -- ‡∏ï‡∏≠‡∏ô‡πÄ‡∏à‡∏≠ Scylla ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ô ChildAdded ‡πÅ‡∏•‡πâ‡∏ß
                repeat task.wait(0.2) until not runningAurora or not scyllaActive
            end
            task.wait(1.0)
        end
    end)
end

-- ========= Toggle Handlers =========
scyllaBtn.MouseButton1Click:Connect(function()
    runningNormal = not runningNormal
    if runningNormal then
        -- ‡∏õ‡∏¥‡∏î Aurora
        if runningAurora then runningAurora = false; setToggle(auroraBtn, false) end
        setToggle(scyllaBtn, true)
        table.insert(debugLines, "‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î Scylla ‡∏õ‡∏Å‡∏ï‡∏¥")
        renderDebug()
        normalLoop()
    else
        setToggle(scyllaBtn, false)
        table.insert(debugLines, "‚õî ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏´‡∏°‡∏î Scylla ‡∏õ‡∏Å‡∏ï‡∏¥")
        renderDebug()
    end
end)

auroraBtn.MouseButton1Click:Connect(function()
    runningAurora = not runningAurora
    if runningAurora then
        -- ‡∏õ‡∏¥‡∏î Normal
        if runningNormal then runningNormal = false; setToggle(scyllaBtn, false) end
        setToggle(auroraBtn, true)
        table.insert(debugLines, "‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î Aurora")
        renderDebug()
        auroraLoop()
    else
        setToggle(auroraBtn, false)
        table.insert(debugLines, "‚õî ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏´‡∏°‡∏î Aurora")
        renderDebug()
    end
end)

debugBtn.MouseButton1Click:Connect(function()
    debugVisible = not debugVisible
    dbg.Visible = debugVisible
    debugBtn.Text = "Debug: " .. (debugVisible and "ON" or "OFF")
    renderDebug()
end)

-- ========= Init Prints =========
table.insert(debugLines, "‚úÖ Jeab Hub Loaded | Yellow-Orange Pastel UI")
if not season or not weather or not cycle then
    table.insert(debugLines, "‚ö†Ô∏è ‡∏ö‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô RS ‡πÑ‡∏°‡πà‡∏û‡∏ö (season/weather/cycle) ‚Äî ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ")
end
renderDebug()
